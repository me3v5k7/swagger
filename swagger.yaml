openapi: 3.0.0
info:
  description: This is the API documentation for the Standpoint application.
  version: "1.0.0"
  title: Standpoint API
  contact:
    email: you@your-company.com

servers:
  - description: Test server
    url: https://delicate-minnow-enhanced.ngrok-free.app/

tags:
  - name: Authentication
    description: User authentication operations.
  - name: Page
    description: Endpoints for aggregated page data.
  - name: Clients
    description: Operations related to clients.
  - name: Exhibition Centers
    description: Operations related to exhibition centers.
  - name: Suppliers
    description: Operations related to suppliers and their tags.
  - name: Company Entity
    description: Shared operations for company entities like addresses, comments, and logos.
  - name: Enums
    description: Endpoints to retrieve enumeration values.
  - name: Images
    description: Operations for retrieving images.

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Logout successful

  /auth/user_info:
    get:
      tags:
        - Authentication
      summary: Get current user info
      operationId: userInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized

  /page/main:
    get:
      tags:
        - Page
      summary: Provides information for the main page within a date range
      operationId: getPageMain
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: dateFrom
          required: true
          schema:
            type: string
            format: date
            example: "2025-01-01"
        - in: query
          name: dateTo
          required: true
          schema:
            type: string
            format: date
            example: "2025-12-31"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventMainPageInfo'

  /client/all:
    get:
      tags:
        - Clients
      summary: Get all clients with filtering and pagination
      operationId: getAllClients
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
            maximum: 40
            default: 8
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: clientType
          schema:
            type: string
        - in: query
          name: managerId
          schema:
            type: integer
        - in: query
          name: lastProjectId
          schema:
            type: integer
        - in: query
          name: lastProjectName
          schema:
            type: string
        - in: query
          name: lastEventName
          schema:
            type: string
        - in: query
          name: lastEventId
          schema:
            type: integer
        - in: query
          name: lastEventDateFrom
          schema:
            type: string
            format: date
        - in: query
          name: lastEventDateTo
          schema:
            type: string
            format: date
        - in: query
          name: anyEventId
          schema:
            type: integer
        - in: query
          name: search
          description: General search term across multiple fields.
          schema:
            type: string
      responses:
        '200':
          description: A list of clients.
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientList'
                  number_of_pages:
                    type: integer

  /client:
    post:
      tags:
        - Clients
      summary: Create a new client
      operationId: createClient
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreate'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  clientId:
                    type: integer

  /client/{id}:
    get:
      tags:
        - Clients
      summary: Get client by ID
      operationId: getClient
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDetails'
    patch:
      tags:
        - Clients
      summary: Partially update client
      operationId: patchClient
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPatch'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
    delete:
      tags:
        - Clients
      summary: Delete client
      operationId: deleteClient
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /exhibition_center/all:
    get:
      tags:
        - Exhibition Centers
      summary: Get all exhibition centers with filtering and pagination
      operationId: getAllExhibitionCenters
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
            maximum: 40
            default: 8
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: managerId
          schema:
            type: integer
        - in: query
          name: lastEventName
          schema:
            type: string
        - in: query
          name: lastEventId
          schema:
            type: integer
        - in: query
          name: lastEventDateFrom
          schema:
            type: string
            format: date
        - in: query
          name: lastEventDateTo
          schema:
            type: string
            format: date
        - in: query
          name: anyEventId
          schema:
            type: integer
        - in: query
          name: search
          description: General search term across multiple fields.
          schema:
            type: string
      responses:
        '200':
          description: A list of exhibition centers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExhibitionCenterList'
                  number_of_pages:
                    type: integer
                  

  /exhibition_center:
    post:
      tags:
        - Exhibition Centers
      summary: Create a new exhibition center
      operationId: createExhibitionCenter
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitionCenterCreate'
      responses:
        '201':
          description: Exhibition Center created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  exhibitionCenterId:
                    type: integer

  /exhibition_center/{id}:
    get:
      tags:
        - Exhibition Centers
      summary: Get exhibition center by ID
      operationId: getExhibitionCenter
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExhibitionCenterDetails'
    patch:
      tags:
        - Exhibition Centers
      summary: Partially update exhibition center
      operationId: patchExhibitionCenter
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitionCenterCreate'
      responses:
        '200':
          description: Exhibition Center updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
    delete:
      tags:
        - Exhibition Centers
      summary: Delete exhibition center
      operationId: deleteExhibitionCenter
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Exhibition Center deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /supplier/all:
    get:
      tags:
        - Suppliers
      summary: Get all suppliers with filtering and pagination
      operationId: getAllSuppliers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 8
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: managerId
          schema:
            type: integer
        - in: query
          name: tags
          description: Comma-separated list of tag IDs to filter by.
          schema:
            type: string
            example: "1,5,12"
        - in: query
          name: search
          description: General search term across multiple fields.
          schema:
            type: string
      responses:
        '200':
          description: A list of suppliers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupplierList'
                  number_of_pages:
                    type: integer

  /supplier:
    post:
      tags:
        - Suppliers
      summary: Create a new supplier
      operationId: createSupplier
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierCreate'
      responses:
        '201':
          description: Supplier created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  supplierId:
                    type: integer

  /supplier/{id}:
    get:
      tags:
        - Suppliers
      summary: Get supplier by ID
      operationId: getSupplier
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierDetails'
    patch:
      tags:
        - Suppliers
      summary: Partially update supplier
      operationId: patchSupplier
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierPatch'
      responses:
        '200':
          description: Supplier updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
    delete:
      tags:
        - Suppliers
      summary: Delete supplier
      operationId: deleteSupplier
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Supplier deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /supplier/{id}/tags:
    put:
      tags:
        - Suppliers
      summary: Update tags for a supplier
      description: Replaces all existing tags for a supplier with the new set of tags.
      operationId: updateSupplierTags
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 5, 12]
      responses:
        '200':
          description: Supplier tags updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /supplier/tag/all:
    get:
      tags:
        - Suppliers
      summary: Get all available supplier tags
      operationId: getAllTags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of all supplier tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupplierTag'

  /supplier/tag:
    post:
      tags:
        - Suppliers
      summary: Create a new supplier tag
      operationId: createTag
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Поліграфія"
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierTag'

  /supplier/tag/{id}:
    put:
      tags:
        - Suppliers
      summary: Update a supplier tag
      operationId: updateTag
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Поліграфічні послуги"
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierTag'
    delete:
      tags:
        - Suppliers
      summary: Delete a supplier tag
      operationId: deleteTag
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /company_entity/{id}/logo:
    post:
      tags:
        - Company Entity
      summary: Upload a logo for any company entity (client, supplier, etc.)
      operationId: uploadCompanyEntityLogo
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the company_entity.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Logo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'

  /company_entity/address:
    post:
      tags:
        - Company Entity
      summary: Create an address for a company entity
      operationId: createAddress
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: companyEntityId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressCreate'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'

  /company_entity/address/{id}:
    get:
      tags:
        - Company Entity
      summary: Get address by ID
      operationId: getAddress
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    put:
      tags:
        - Company Entity
      summary: Update address
      operationId: updateAddress
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressCreate'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    delete:
      tags:
        - Company Entity
      summary: Delete address
      operationId: deleteAddress
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /company_entity/contact_person:
    post:
      tags:
        - Company Entity
      summary: Create contact person for a company entity
      operationId: createContactPerson
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: companyEntityId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactPersonCreate'
      responses:
        '201':
          description: Contact person created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'

  /company_entity/contact_person/{id}:
    get:
      tags:
        - Company Entity
      summary: Get contact person by ID
      operationId: getContactPerson
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactPersonDetails'
    put:
      tags:
        - Company Entity
      summary: Update contact person
      operationId: updateContactPerson
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactPersonUpdate'
      responses:
        '200':
          description: Contact person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    delete:
      tags:
        - Company Entity
      summary: Delete contact person
      operationId: deleteContactPerson
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Contact person deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /company_entity/details:
    post:
      tags:
        - Company Entity
      summary: Create company details for a company entity
      operationId: createCompanyDetails
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: companyEntityId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDetailsCreate'
      responses:
        '201':
          description: Company details created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetails'

  /company_entity/details/{id}:
    get:
      tags:
        - Company Entity
      summary: Get company details by ID
      operationId: getCompanyDetails
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetails'
    put:
      tags:
        - Company Entity
      summary: Update company details
      operationId: updateCompanyDetails
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDetailsCreate'
      responses:
        '200':
          description: Company details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetails'
    delete:
      tags:
        - Company Entity
      summary: Delete company details
      operationId: deleteCompanyDetails
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Company details deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /company_entity/comment:
    post:
      tags:
        - Company Entity
      summary: Create a comment for a company entity
      operationId: createCompanyComment
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: companyEntityId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /company_entity/comment/{id}:
    get:
      tags:
        - Company Entity
      summary: Get comment by ID
      operationId: getCompanyComment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetails'
    put:
      tags:
        - Company Entity
      summary: Update comment
      operationId: updateCompanyComment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
        - Company Entity
      summary: Delete comment
      operationId: deleteCompanyComment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /image/{id}:
    get:
      tags:
        - Images
      summary: Get image by ID
      operationId: getImage
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Image data
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found

  /enum/company_entity_types:
    get:
      tags:
        - Enums
      summary: Get company entity types enum
      operationId: getCompanyEntityTypes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of company entity types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["exhibition center", "client", "supplier"]

  /enum/client_types:
    get:
      tags:
        - Enums
      summary: Get client types enum
      operationId: getClientTypes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of client types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["public", "private"]

  /enum/project_categories:
    get:
      tags:
        - Enums
      summary: Get project categories enum
      operationId: getProjectCategories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of project categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["exclusive", "standart", "pidvis"]

  /enum/project_statuses:
    get:
      tags:
        - Enums
      summary: Get project statuses enum
      operationId: getProjectStatuses
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of project statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["waiting for contact", "initial negotiations", "technical requirements formed", "design approved", "estimate approved", "contract signed", "blueprints ready", "materials ordered", "materials received", "installation in progress", "stand delivered", "payments closed", "cancelled", "not participating"]

  /enum/managers:
    get:
      tags:
        - Enums
      summary: Get list of managers
      operationId: getManagers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of managers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Manager'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    EventDates:
      type: object
      properties:
        add_con_start:
          type: string
          format: date
          nullable: true
        con_start:
          type: string
          format: date
          nullable: true
        client:
          type: string
          format: date
          nullable: true
        event_start:
          type: string
          format: date
          nullable: true
        event_end:
          type: string
          format: date
          nullable: true
        decon_end:
          type: string
          format: date
          nullable: true
        add_decon_end:
          type: string
          format: date
          nullable: true

    Event:
      type: object
      properties:
        id:
          type: integer
        short_name:
          type: string
        full_name:
          type: string
        organiser:
          $ref: '#/components/schemas/CompanyEntityBase'
        event_dates:
          $ref: '#/components/schemas/EventDates'

    EventMainPageInfo:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
        counter:
          $ref: '#/components/schemas/CategoriesCounter'
        project_types:
          type: object
          additionalProperties:
            type: object
            properties:
              counter:
                $ref: '#/components/schemas/CategoriesCounter'
              managers:
                type: array
                items:
                  type: object
                  properties:
                    manager:
                      $ref: '#/components/schemas/Manager'
                    counter:
                      $ref: '#/components/schemas/CategoriesCounter'
                    projects:
                      type: array
                      items:
                        $ref: '#/components/schemas/Project'

    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
        client:
          $ref: '#/components/schemas/CompanyEntityBase'
        budget:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectBudget'
        image_ids:
          type: array
          nullable: true
          items:
            type: integer

    ProjectBudget:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        currency:
          type: string
        exchange_rate:
          type: number

    CategoriesCounter:
      type: object
      properties:
        awaiting_contact:
          type: integer
        in_progress:
          type: integer
        finished:
          type: integer
        canceled:
          type: integer

    ClientList:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        client_type:
          type: string
        website:
          type: string
          nullable: true
        manager_user:
          $ref: '#/components/schemas/Manager'
        contact_persons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPersonDetails'
        last_project:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        last_event:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            date_add_con_start:
              type: string
              format: date-time
            date_add_decon_end:
              type: string
              format: date-time

    ExhibitionCenterList:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        website:
          type: string
          nullable: true
        manager_user:
          $ref: '#/components/schemas/Manager'
        contact_persons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPersonDetails'
        last_event:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            date_add_con_start:
              type: string
              format: date-time
            date_add_decon_end:
              type: string
              format: date-time

    SupplierList:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        website:
          type: string
          nullable: true
        manager_user:
          $ref: '#/components/schemas/Manager'
        tags:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/SupplierTag'

    CompanyEntityBase:
      type: object
      nullable: true
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        website:
          type: string
          nullable: true

    CompanyEntityDB:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        client_type:
          type: string
          nullable: true
        name:
          type: string
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        manager_user_id:
          type: integer
          nullable: true

    ClientCreate:
      type: object
      properties:
        clientType:
          type: string
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        managerUserId:
          type: integer

    ExhibitionCenterCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        managerUserId:
          type: integer

    SupplierCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        managerUserId:
          type: integer
        tagIds:
          type: array
          items:
            type: integer

    ClientPatch:
      type: object
      description: Fields to partially update for a client.
      properties:
        clientType:
          type: string
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        managerUserId:
          type: integer

    SupplierPatch:
      type: object
      description: Fields to partially update for a supplier.
      properties:
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        managerUserId:
          type: integer

    ClientDetails:
      type: object
      properties:
        client:
          $ref: '#/components/schemas/CompanyEntityDB'
        contact_persons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPersonWithContacts'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        company_details:
          type: array
          items:
            $ref: '#/components/schemas/CompanyDetails'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDetails'

    ExhibitionCenterDetails:
      type: object
      properties:
        exhibitionCenter:
          $ref: '#/components/schemas/CompanyEntityDB'
        contact_persons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPersonWithContacts'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        company_details:
          type: array
          items:
            $ref: '#/components/schemas/CompanyDetails'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDetails'

    SupplierDetails:
      type: object
      properties:
        supplier:
          $ref: '#/components/schemas/CompanyEntityDB'
        contact_persons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPersonWithContacts'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        company_details:
          type: array
          items:
            $ref: '#/components/schemas/CompanyDetails'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDetails'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/SupplierTag'

    Address:
      type: object
      properties:
        id:
          type: integer
        country:
          type: string
        city:
          type: string
        address:
          type: string
        Maps_link:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true

    AddressCreate:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        address:
          type: string
        googleMapsLink:
          type: string
        comment:
          type: string

    ContactPerson:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: string
          nullable: true
        company_entity_id:
          type: integer

    ContactPersonCreate:
      type: object
      properties:
        name:
          type: string
        position:
          type: string
        phones:
          type: array
          items:
            type: object
            properties:
              phone:
                type: string
              comment:
                type: string
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              comment:
                type: string

    ContactPersonDetails:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: string
          nullable: true
        company_entity_id:
          type: integer
        phones:
          type: array
          items:
            type: object
            properties:
              phone:
                type: string
              comment:
                type: string
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              comment:
                type: string

    ContactPersonWithContacts:
      allOf:
        - $ref: '#/components/schemas/ContactPerson'
        - type: object
          properties:
            phones:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  phone:
                    type: string
                  comment:
                    type: string
            emails:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  comment:
                    type: string

    ContactPersonUpdate:
      type: object
      properties:
        name:
          type: string
        position:
          type: string
        companyEntityId:
          type: integer
        phones:
          type: array
          items:
            type: object
            properties:
              phone:
                type: string
              comment:
                type: string
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              comment:
                type: string

    CompanyDetails:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        payment_details:
          type: string
        comment:
          type: string

    CompanyDetailsCreate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        paymentDetails:
          type: string
        comment:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: integer
        comment:
          type: string
        company_entity_id:
          type: integer
        user_id:
          type: integer

    CommentCreate:
      type: object
      properties:
        comment:
          type: string

    CommentDetails:
      type: object
      properties:
        id:
          type: integer
        comment:
          type: string
        user:
          $ref: '#/components/schemas/Manager'

    SupplierTag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        token:
          type: string

    UserInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Manager:
      type: object
      nullable: true
      properties:
        id:
          type: integer
        name:
          type: string
        avatar_image_file_id:
          type: integer
          nullable: true

    CreateResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer

    UpdateResponse:
      type: object
      properties:
        message:
          type: string
        client:
          type: object

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    UploadImageResponse:
      type: object
      properties:
        message:
          type: string
        imageId:
          type: integer